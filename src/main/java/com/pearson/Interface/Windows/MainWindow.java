package com.pearson.Interface.Windows;

import com.pearson.Interface.Interfaces.XMLInterface;
import com.pearson.Interface.Models.RulesTreeTableModel;

import java.awt.event.*;
import java.io.File;
import java.io.IOException;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.TreeSelectionModel;

import noNamespace.MaskingSetDocument;
import noNamespace.Rule;
import noNamespace.RulesDocument.Rules;
import org.apache.xmlbeans.XmlException;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 * @author UMA99J5
 */
public class MainWindow extends javax.swing.JFrame {

    private RulesTreeTableModel rulesInSetTreeModel;
    private javax.swing.JTabbedPane RulesInSetPane;
    private javax.swing.JTree RulesInSetTree;
    private org.jdesktop.swingx.JXTreeTable TestTree;
    private javax.swing.JMenuItem clearMaskingSetMenuButton;
    private javax.swing.JMenuItem deleteRuleMenuButton;
    private javax.swing.JMenuItem disableRuleMenuButton;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JMenu maskingSetMenuItem;
    private javax.swing.JMenuItem newMaskingSetMenuButton;
    private javax.swing.JMenuItem newRuleMenuButton;
    private javax.swing.JMenuItem openMaskingSetMenuButton;
    private javax.swing.JMenu ruleMenuItem;
    private javax.swing.JMenuItem saveSetAsMenuButton;
    private javax.swing.JMenuItem saveSetMenuButton;
    private javax.swing.JPanel settings;
    private JMenuItem rightClickMenuItem;
    private JPopupMenu rulesInSetRightClickMenu;

    /**
     * Creates new form DataMaskFrontEndGUI
     */
    public MainWindow() {

        initComponents();
        TestTree.setComponentPopupMenu(new JPopupMenu("label"));

        DefaultTreeCellRenderer renderer = (DefaultTreeCellRenderer) RulesInSetTree.getCellRenderer();

        renderer.setLeafIcon(null);
        renderer.setClosedIcon(null);
        renderer.setOpenIcon(null);

        TestTree.setLeafIcon(null);
        TestTree.setClosedIcon(null);
        TestTree.setOpenIcon(null);
        TestTree.getTreeSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);

        com.pearson.Interface.UIManager.setMainWindow(this);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        RulesInSetPane = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        RulesInSetTree = new javax.swing.JTree();
        settings = new javax.swing.JPanel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox3 = new javax.swing.JCheckBox();
       
        TestTree = new org.jdesktop.swingx.JXTreeTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        maskingSetMenuItem = new javax.swing.JMenu();
        newMaskingSetMenuButton = new javax.swing.JMenuItem();
        openMaskingSetMenuButton = new javax.swing.JMenuItem();
        
        saveSetMenuButton = new javax.swing.JMenuItem();
        saveSetAsMenuButton = new javax.swing.JMenuItem();
        ruleMenuItem = new javax.swing.JMenu();
        newRuleMenuButton = new javax.swing.JMenuItem();
        deleteRuleMenuButton = new javax.swing.JMenuItem();
        disableRuleMenuButton = new javax.swing.JMenuItem();
        rulesInSetRightClickMenu = new JPopupMenu();

        // initialise right click menu
        rightClickMenuItem = new JMenuItem("Create a new dependent rule");
        rightClickMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createNewDependentRuleRightClickMenuActionPerformed(evt);
            }
        });
        rulesInSetRightClickMenu.add(rightClickMenuItem);


        rightClickMenuItem = new JMenuItem("Delete");
        rightClickMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteRightClickMenuActionPerformed(evt);
            }
        });
        rulesInSetRightClickMenu.add(rightClickMenuItem);

        TestTree.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                // if the right button was clicked and user clicked inside a rule
                if (SwingUtilities.isRightMouseButton(e) && TestTree.getPathForLocation(e.getX(), e.getY()) != null) {
                    //select the rule and display a context menu
                    TestTree.getTreeSelectionModel().setSelectionPath(TestTree.getPathForLocation(e.getX(), e.getY()));
                    rulesInSetRightClickMenu.show(TestTree, e.getX(), e.getY());
                }
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        RulesInSetTree.setModel(rulesInSetTreeModel);
        jScrollPane1.setViewportView(RulesInSetTree);
		jScrollPane1.setViewportView(TestTree);
        RulesInSetPane.addTab("Rules in Set", jScrollPane1);

        jCheckBox1.setText("New Disable FK Constraints Rule...");

        jCheckBox3.setText("New Disable Triggers Rule...");

        javax.swing.GroupLayout settingsLayout = new javax.swing.GroupLayout(settings);
        settings.setLayout(settingsLayout);
        settingsLayout.setHorizontalGroup(
                settingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(settingsLayout.createSequentialGroup()
                                .addGap(52, 52, 52)
                                .addGroup(settingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jCheckBox3)
                                        .addComponent(jCheckBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap(280, Short.MAX_VALUE))
        );
        settingsLayout.setVerticalGroup(
                settingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(settingsLayout.createSequentialGroup()
                                .addGap(31, 31, 31)
                                .addComponent(jCheckBox1)
                                .addGap(23, 23, 23)
                                .addComponent(jCheckBox3)
                                .addContainerGap(417, Short.MAX_VALUE))
        );

        RulesInSetPane.addTab("Settings", settings);



        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(RulesInSetPane, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGap(11, 11, 11)
                                .addComponent(RulesInSetPane))
        );

        maskingSetMenuItem.setText("Masking Set");
        maskingSetMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maskingSetMenuItemActionPerformed(evt);
            }
        });

        newMaskingSetMenuButton.setText("New Masking Set...");
        newMaskingSetMenuButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newMaskingSetMenuButtonActionPerformed(evt);
            }
        });
        maskingSetMenuItem.add(newMaskingSetMenuButton);

        openMaskingSetMenuButton.setText("Open Masking Set...");
        openMaskingSetMenuButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMaskingSetMenuButtonActionPerformed(evt);
            }
        });
        maskingSetMenuItem.add(openMaskingSetMenuButton);

        
        

        saveSetMenuButton.setText("Save Set...");
        saveSetMenuButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveSetMenuButtonActionPerformed(evt);
            }
        });
        maskingSetMenuItem.add(saveSetMenuButton);

        saveSetAsMenuButton.setText("Save Set As...");
        saveSetAsMenuButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveSetAsmenuButtonActionPerformed(evt);
            }
        });
        maskingSetMenuItem.add(saveSetAsMenuButton);

        jMenuBar1.add(maskingSetMenuItem);

        ruleMenuItem.setText("Rule");

        newRuleMenuButton.setText("New Rule...");
        newRuleMenuButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newRuleMenuButtonActionPerformed(evt);
            }
        });
        ruleMenuItem.add(newRuleMenuButton);

        

        

        jMenuBar1.add(ruleMenuItem);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addContainerGap())

        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void saveSetMenuButtonActionPerformed(ActionEvent evt) {

    }

    private void saveSetAsmenuButtonActionPerformed(ActionEvent evt) {
        //To change body of created methods use File | Settings | File Templates.
    }

    private void createNewDependentRuleRightClickMenuActionPerformed(ActionEvent evt) {

        int row = TestTree.getSelectedRow();
        String ruleID = TestTree.getValueAt(row, RulesTreeTableModel.RULE_ID_COLUMN).toString();

        Rule newRule = XMLInterface.getRule(ruleID);

        if (!newRule.isSetDependencies()) {
                XMLInterface.addDependencyToRule(newRule);
        }

        com.pearson.Interface.UIManager.setParentRule(newRule);
        DatabaseConnectionInfoWindow newWindow = new DatabaseConnectionInfoWindow();
        newWindow.setVisible(true);
        newWindow.setDefaultCloseOperation(MainWindow.HIDE_ON_CLOSE);
    }

    private void deleteRightClickMenuActionPerformed(ActionEvent evt) {

        int row = TestTree.getSelectedRow();
        String ruleID = TestTree.getValueAt(row, RulesTreeTableModel.RULE_ID_COLUMN).toString();

        Rule ruleToDelete = XMLInterface.getRule(ruleID);

        if (!XMLInterface.isLeaf(ruleToDelete)) {
            Object[] options = {"Delete all child rules", "Cancel"};
            int userChoice = JOptionPane.showOptionDialog(null, "Deleting parent rule will result in deleting all child rules." +
                    " Please choose one of the following", "Are you sure you want to delete this rule?",
                    JOptionPane.YES_OPTION, JOptionPane.WARNING_MESSAGE, null, options, options[1]);

            if (userChoice != JOptionPane.YES_OPTION){
                return;
            }
        }

        XMLInterface.removeRule(ruleToDelete);

        try {
            XMLInterface.saveCurrentFile();
        } catch (IOException e) {
            e.printStackTrace();
        }

        updateTreeModel();
    }

    private void newMaskingSetMenuButtonActionPerformed(java.awt.event.ActionEvent evt) {

        // need to do checks if a masking set has already been created and if the user wants
        // to save it
        XMLInterface.createNewFile();
    }

    private void openMaskingSetMenuButtonActionPerformed(java.awt.event.ActionEvent evt) {
        // create a file chooser
        JFileChooser fc = new JFileChooser();
        int returnVal = fc.showOpenDialog(openMaskingSetMenuButton);
        File file = null;

        if (evt.getSource() == openMaskingSetMenuButton) {
            //handle open button action

            if (returnVal == JFileChooser.APPROVE_OPTION) {
                file = fc.getSelectedFile();

            }
        }

        XMLInterface.setXMLFile(file);

        LinkedList<String> columnNames = new LinkedList<>();
        columnNames.add("Rule ID");
        columnNames.add("Rule Type");
        columnNames.add("Target");
        columnNames.add("Columns");

        updateTreeModel();
        TestTree.expandAll();

    }

    private void newRuleMenuButtonActionPerformed(java.awt.event.ActionEvent evt) {

        DatabaseConnectionInfoWindow iw = new DatabaseConnectionInfoWindow();
        iw.setVisible(true);
        iw.setDefaultCloseOperation(MainWindow.HIDE_ON_CLOSE);

    }

    private void maskingSetMenuItemActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }

    private void close() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    /**
     * Updates the rules in set view
     */
    public void updateTreeModel() {

        rulesInSetTreeModel = new RulesTreeTableModel(XMLInterface.getRulesTree());
        TestTree.setTreeTableModel(rulesInSetTreeModel);
        TestTree.expandAll();
    }

}

class PopupListener extends MouseAdapter {
    JPopupMenu popup;

    PopupListener(JPopupMenu popupMenu) {
        popup = popupMenu;
    }

    public void mousePressed(MouseEvent e) {
        maybeShowPopup(e);
    }

    public void mouseReleased(MouseEvent e) {
        maybeShowPopup(e);
    }

    public void mouseClicked(MouseEvent e) {
        maybeShowPopup(e);
    }

    private void maybeShowPopup(MouseEvent e) {
        if (e.isPopupTrigger()) {

            popup.show(e.getComponent(),
                    e.getX(), e.getY());
        }
    }
}
